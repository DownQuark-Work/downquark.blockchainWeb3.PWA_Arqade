@use "sass:color";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

@use 'variables/colors';
@use 'variables/content';
@use 'variables/dimensions';
@use 'variables/fonts';
@use 'variables/typography';

// Below will create lighter and darker shades for each token with `Base` in its name
$CoreColors:();
@each $var, $val in meta.module-variables(colors) {
  @if string.index($var, "Base") {
    $CoreColors: map.set($CoreColors, #{$var},default, $val);
    $CoreColors: map.set($CoreColors, #{$var},darker, color.scale($val, $lightness: -60%));
    $CoreColors: map.set($CoreColors, #{$var},dark, color.scale($val, $lightness: -30%));
    $CoreColors: map.set($CoreColors, #{$var},light, color.scale($val, $lightness: 30%));
    $CoreColors: map.set($CoreColors, #{$var},lighter, color.scale($val, $lightness: 60%));
    $CoreColors: map.set($CoreColors, #{$var},complement, color.complement($val));
  }
};

@mixin colr($clr,$variant:'',$slctr:'') {
  // usage downquark.$dq-var-clr('dqColorBaseOrange')
  // usage downquark.$dq-var-clr('dqColorBaseOrange','light','')
  // usage downquark.$dq-var-clr('dqColorBaseOrange','','background')
  // usage downquark.$dq-var-clr('dqColorBaseOrange','dark','background-')

  @if $variant == '' {
    $variant :'default'
  }
  @if string.length($slctr){
    @if string.slice($slctr, -1, -1) != '-'{
      $slctr: #{$slctr}-;
    }
  }

  #{$slctr}color:map.get($CoreColors,$clr,$variant);
}

@function colr($clr,$variant:'') {
  // usage downquark.$dq-var-colr('dqColorBaseOrange')
  // usage downquark.$dq-var-colr('dqColorBaseOrange','light','')

  @if $variant == '' {
    $variant :'default'
  }

  @return map.get($CoreColors,$clr,$variant);
}
